// Adds binary numbers from in
// Resets and ouputs the result and a clock signal on read
module adder (in[N],read) (out[N], clk){
  rst, t = dup(read);       // need 3 ouputs from read, 2 for toggling the output latch twice, and one for clk
  rst, delay(clk) = dup(t); // delay clk so ouput has time to settle
  
  latch = link();
  _, _ = flip(rst, latch);
  
  for i = 0 to N {
    in[i+1], catch(tmp[i]) = flip(in[i], :latch); // adder circuitry
    _, out[i] = switch(tmp[i],latch);           // output latch
  }
}

// Stores binary numbers from in
// Ouputs stored number on read
// Resets to 0 on rst
// Warning: storing multiple numbers without reseting results in state = (in xor state) rather than state = (in)
module memory (in[N],read,rst) (out[N], clk){
  latch = link(); // on reset release marbles
  _, _ = flip(rst, latch);
  tmp[N+1] = dup[N+1](read);// need N+1 marbles for each read
  delay(clk) = tmp[N+1];   // delay clk to give output time
  
  for i = 0 to N {
    l[i] = link(); // convert marble into switch state
    _,_ flip(in[i],:latch,l[i]);
    _, out[i] = switch(tmp[i],l[i]);// read switch state
  }
}

//Reads numbers on in
//On read outputs out and emits clk
module xor (in[N],read) (out[N], clk){
  rst, t = dup(read);       // need 3 ouputs from read, 2 for toggling the output latch twice, and one for clk
  rst, delay(clk) = dup(t); // delay clk so ouput has time to settle
  
  latch = link);
  _, _ = flip(rst, latch);
  
  for i = 0 to N {
    _, catch(tmp[i]) = flip(in[i], :latch); // adder circuitry without carray
    _, out[i] = switch(tmp[i],latch);             // output latch
  }
}

//Reads numbers on in, with clock
//On read outputs out and emits clk
module and (in[N],clock,read)(out[N],clk){
  {src[N], delay(rst)} = dup[N+1](read); //Needs one marble per bit to read and a reset marble
  reset = link(); // On clock set state = 0; set back to 1 if marble in catch
  _, _ = flip(clock, reset);
  set   = link();   // On read set state = 1;
  _, _ = flip(rst, set);

  for i = 0 to N {
    l[i] = link();
    _, catch(tmp[i]) = switch(in[i],l[i]); // if state is 0, discard marbles, but catch marbles if 1
    _, _ = flip(tmp[i],l[i],:reset,-:set);    // When marbles released, from switch set to state 1
    _, out[i] = switch(src[i],l[i])           // On read output state
  }
}

//Reads numbers on in
//On read outputs out and emits clk
module or (in[N],read)(out[N],clk){
  t, delay(clk) = dup(read);
  reset = link(); // On read set state = 0, and release the marbles
  _, _ = flip(t, reset);

  for i=0-N {
    l[i] = link();
    tmp[i], _ = switch(in[i],l[i]);                // if state is 0, send marble to flip, but discard if 1
    _, catch(out[i]) = flip(tmp[i],l[i],:reset);    // Set state to 1
  }
}

