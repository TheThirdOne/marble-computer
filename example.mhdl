# Adds binary numbers from in
# Resets and ouputs the result and a clock signal on read
module adder (in[N],read) (out[N], clk){
  rst, t = dup(read);       # need 3 ouputs from read, 2 for toggling the output latch twice, and one for clk
  rst, delay(clk) = dup(t); # delay clk so ouput has time to settle
  
  latch = link(flip(rst)); # makes output go to out or null
  reset = linkt(latch);    # releases stored marbles
  
  for i=0-N {
    in[i+1], catch(tmp[N]) = flip(reset,in[i]); # adder circuitry
    _, out[i] = switch(latch,tmp[i]);           # output latch
  }
}

# Stores binary numbers from in
# Ouputs stored number on read
# Resets to 0 on rst
# Warning: storing multiple numbers without reseting results in state = (in xor state) rather than state = (in)
module memory (in[N],read,rst) (out[N], clk){
  reset = linkt(flip(rst)); # on reset release marbles 
  tmp[N+1] = dup[N+1](read);# need N+1 marbles for each read 
  delay(clk) = temp[N+1];   # delay clk to give output time
  
  for i = 0-N {
    l[i] = link(flip(reset,in[i])); # convert marble into switch state
    _, out[i] = switch(l[i],tmp[i]);# read switch state
  }
}
